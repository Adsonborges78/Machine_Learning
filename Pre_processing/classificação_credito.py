# -*- coding: utf-8 -*-
"""Classificação_credito.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tBcLtzpIkesAFsdcwOAghrm4edHeHTYx
"""

!pip install plotly --upgrade

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

base_credit = pd.read_csv('/content/credit_data.csv')

base_credit

# para visualizar os primeiros registros
base_credit.head(10)

# para visualizar os últimos registros
base_credit.tail(10)

# para gerar algumas estatísticas
base_credit.describe()

# para fazer filtros
base_credit[base_credit['income'] >= 69995.685578]

base_credit[base_credit['clientid'] == 423]

base_credit[base_credit['loan'] <= 1.377630]

base_credit[base_credit['clientid'] == 866]

np.unique(base_credit['default'], return_counts = True)

sns.countplot(x=base_credit['default'])

plt.hist(x = base_credit['age'])

plt.hist(x = base_credit['income'])

plt.hist(x = base_credit['loan'])

grafico = px.scatter_matrix(base_credit, dimensions=['age', 'income', 'loan'], color = 'default')
grafico.show()

base_credit.loc[base_credit['age'] < 0]

base_credit.loc[base_credit['clientid'] == 16]

base_credit[base_credit['age'] < 0]



"""**TÉCNICA PARA APAGAR COLUNA INTEIRA**"""

base_credit2 = base_credit.drop('age', axis=1)
base_credit2

"""__TÉCNICA PARA APAGAR SOMENTE OS REGISTROS COM VALORES INCONSISTENTES__"""

base_credit3 = base_credit.drop(base_credit[base_credit['age'] < 0].index)
base_credit3

base_credit3.loc[base_credit['age'] < 0]

"""**TÉCNICA PARA PREENCHER OS VALORES INCOSISTENTE MANUALMENTE COM A MÉDIA**"""

base_credit.mean()

base_credit['age'].mean()

base_credit['age'][base_credit['age'] > 0].mean()

base_credit.loc[base_credit['age'] < 0, 'age'] = 40.92

base_credit.loc[base_credit['age'] < 0]

base_credit.head(27)

px.scatter_matrix(base_credit, dimensions=['age','income','loan'], color= 'default')

base_credit.isnull().sum()

base_credit.loc[pd.isnull(base_credit['age'])]

base_credit['age'].fillna(base_credit['age'].mean(), inplace = True)

base_credit.loc[pd.isnull(base_credit['age'])]

px.scatter_matrix(base_credit, dimensions=['age', 'income', 'loan'], color = 'default')

base_credit.loc[(base_credit['clientid'] == 29) | (base_credit['clientid'] == 31) | (base_credit['clientid'] == 32)]

base_credit.loc[(base_credit['clientid'] == 5) | (base_credit['clientid'] == 8) | (base_credit['clientid'] == 22)]

base_credit.loc[(base_credit['clientid'] == 3) | (base_credit['clientid'] == 7) | (base_credit['clientid'] == 10)]

base_credit.loc[base_credit['clientid'].isin([29, 31, 32])]

"""**CRIAÇÃO DAS VARIÁVEIS QUE IRÃO RECEBER OS PREVISORES E A CLASSE**"""

# variável X que receberá os previsores
X_credit = base_credit.iloc[:, 1:4].values
X_credit

type(X_credit)

# variável y que receberá a classe
y_credit = base_credit.iloc[:, 4].values
y_credit

type(y_credit)

"""#**ESCALONAMENTO DOS ATRIBUTOS**
##Padronização --> Standardisation 
##Normalização --> Normalization
"""



X_credit[:, 0].min(), X_credit[:, 1].min(), X_credit[:, 2].min()

X_credit[:, 0].max(), X_credit[:, 1].max(), X_credit[:, 2].max()

from sklearn.preprocessing import StandardScaler
scaler_credit = StandardScaler()
X_credit = scaler_credit.fit_transform(X_credit)

X_credit[:, 0].min(), X_credit[:, 1].min(), X_credit[:, 2].min()

X_credit[:, 0].max(), X_credit[:, 1].max(), X_credit[:, 2].max()

X_credit



